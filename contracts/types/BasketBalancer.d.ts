/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface BasketBalancerInterface extends ethers.utils.Interface {
  functions: {
    'addToken(address,uint256)': FunctionFragment;
    'continuousVote(address)': FunctionFragment;
    'fullAllocation()': FunctionFragment;
    'getCurrentEpoch()': FunctionFragment;
    'getTargetAllocation(address)': FunctionFragment;
    'getTokens()': FunctionFragment;
    'hasVotedInEpoch(address,uint128)': FunctionFragment;
    'lastEpochEnd()': FunctionFragment;
    'lastEpochUpdate()': FunctionFragment;
    'maxDelta()': FunctionFragment;
    'poolRouter()': FunctionFragment;
    'DictatorDAO()': FunctionFragment;
    'xfoldDiamond()': FunctionFragment;
    'removeToken(address)': FunctionFragment;
    'setMaxDelta(uint256)': FunctionFragment;
    'setbddao(address)': FunctionFragment;
    'setRouter(address)': FunctionFragment;
    'updateAllocationVote(address[],uint256[])': FunctionFragment;
    'updateBasketBalance()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'addToken',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'continuousVote',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'fullAllocation',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrentEpoch',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getTargetAllocation',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'getTokens', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'hasVotedInEpoch',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'lastEpochEnd',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastEpochUpdate',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'maxDelta', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'poolRouter',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'DictatorDAO', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'xfoldDiamond',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'removeToken', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setMaxDelta',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'setbddao', values: [string]): string;
  encodeFunctionData(functionFragment: 'setRouter', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'updateAllocationVote',
    values: [string[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateBasketBalance',
    values?: undefined,
  ): string;

  decodeFunctionResult(functionFragment: 'addToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'continuousVote',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'fullAllocation',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrentEpoch',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTargetAllocation',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getTokens', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'hasVotedInEpoch',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastEpochEnd',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastEpochUpdate',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'maxDelta', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DictatorDAO', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'xfoldDiamond',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setMaxDelta',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setbddao', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRouter', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'updateAllocationVote',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateBasketBalance',
    data: BytesLike,
  ): Result;

  events: {
    'NewToken(address,uint256)': EventFragment;
    'RemoveToken(address)': EventFragment;
    'UpdateAllocation(uint128,address,uint256)': EventFragment;
    'VoteOnAllocation(address,address,uint256,uint128)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'NewToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoveToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateAllocation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VoteOnAllocation'): EventFragment;
}

export class BasketBalancer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BasketBalancerInterface;

  functions: {
    addToken(
      token: string,
      allocation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    continuousVote(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    fullAllocation(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTargetAllocation(
      pool: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getTokens(overrides?: CallOverrides): Promise<[string[]]>;

    hasVotedInEpoch(
      user: string,
      epoch: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    lastEpochEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastEpochUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolRouter(overrides?: CallOverrides): Promise<[string]>;

    DictatorDAO(overrides?: CallOverrides): Promise<[string]>;

    xfoldDiamond(overrides?: CallOverrides): Promise<[string]>;

    removeToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMaxDelta(
      _maxDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setbddao(
      _bddao: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRouter(
      _poolRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateAllocationVote(
      tokens: string[],
      allocations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateBasketBalance(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  addToken(
    token: string,
    allocation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  continuousVote(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  fullAllocation(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getTargetAllocation(
    pool: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getTokens(overrides?: CallOverrides): Promise<string[]>;

  hasVotedInEpoch(
    user: string,
    epoch: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  lastEpochEnd(overrides?: CallOverrides): Promise<BigNumber>;

  lastEpochUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  maxDelta(overrides?: CallOverrides): Promise<BigNumber>;

  poolRouter(overrides?: CallOverrides): Promise<string>;

  DictatorDAO(overrides?: CallOverrides): Promise<string>;

  xfoldDiamond(overrides?: CallOverrides): Promise<string>;

  removeToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMaxDelta(
    _maxDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setbddao(
    _bddao: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRouter(
    _poolRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateAllocationVote(
    tokens: string[],
    allocations: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateBasketBalance(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addToken(
      token: string,
      allocation: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    continuousVote(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fullAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetAllocation(
      pool: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTokens(overrides?: CallOverrides): Promise<string[]>;

    hasVotedInEpoch(
      user: string,
      epoch: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    lastEpochEnd(overrides?: CallOverrides): Promise<BigNumber>;

    lastEpochUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    maxDelta(overrides?: CallOverrides): Promise<BigNumber>;

    poolRouter(overrides?: CallOverrides): Promise<string>;

    DictatorDAO(overrides?: CallOverrides): Promise<string>;

    xfoldDiamond(overrides?: CallOverrides): Promise<string>;

    removeToken(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    setMaxDelta(
      _maxDelta: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setbddao(_bddao: string, overrides?: CallOverrides): Promise<void>;

    setRouter(_poolRouter: string, overrides?: CallOverrides): Promise<void>;

    updateAllocationVote(
      tokens: string[],
      allocations: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    updateBasketBalance(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    NewToken(
      pool?: string | null,
      allocation?: BigNumberish | null,
    ): TypedEventFilter<
      [string, BigNumber],
      { pool: string; allocation: BigNumber }
    >;

    RemoveToken(
      pool?: string | null,
    ): TypedEventFilter<[string], { pool: string }>;

    UpdateAllocation(
      epoch?: BigNumberish | null,
      pool?: string | null,
      allocation?: BigNumberish | null,
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { epoch: BigNumber; pool: string; allocation: BigNumber }
    >;

    VoteOnAllocation(
      sender?: string | null,
      pool?: string | null,
      allocation?: BigNumberish | null,
      epoch?: null,
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { sender: string; pool: string; allocation: BigNumber; epoch: BigNumber }
    >;
  };

  estimateGas: {
    addToken(
      token: string,
      allocation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    continuousVote(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fullAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetAllocation(
      pool: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTokens(overrides?: CallOverrides): Promise<BigNumber>;

    hasVotedInEpoch(
      user: string,
      epoch: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lastEpochEnd(overrides?: CallOverrides): Promise<BigNumber>;

    lastEpochUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    maxDelta(overrides?: CallOverrides): Promise<BigNumber>;

    poolRouter(overrides?: CallOverrides): Promise<BigNumber>;

    DictatorDAO(overrides?: CallOverrides): Promise<BigNumber>;

    xfoldDiamond(overrides?: CallOverrides): Promise<BigNumber>;

    removeToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMaxDelta(
      _maxDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setbddao(
      _bddao: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRouter(
      _poolRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateAllocationVote(
      tokens: string[],
      allocations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateBasketBalance(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToken(
      token: string,
      allocation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    continuousVote(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    fullAllocation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTargetAllocation(
      pool: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasVotedInEpoch(
      user: string,
      epoch: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastEpochEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastEpochUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DictatorDAO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xfoldDiamond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMaxDelta(
      _maxDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setbddao(
      _bddao: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRouter(
      _poolRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateAllocationVote(
      tokens: string[],
      allocations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateBasketBalance(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}

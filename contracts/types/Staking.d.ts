/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface StakingInterface extends ethers.utils.Interface {
  functions: {
    'balanceLocked(address,address)': FunctionFragment;
    'computeNewMultiplier(uint256,uint128,uint256,uint128)': FunctionFragment;
    'currentEpochMultiplier()': FunctionFragment;
    'deposit(address,uint256)': FunctionFragment;
    'emergencyWithdraw(address)': FunctionFragment;
    'epoch1Start()': FunctionFragment;
    'epochDuration()': FunctionFragment;
    'epochIsInitialized(address,uint128)': FunctionFragment;
    'getCurrentEpoch()': FunctionFragment;
    'getEpochPoolSize(address,uint128)': FunctionFragment;
    'getEpochUserBalance(address,address,uint128)': FunctionFragment;
    'initEpochForTokens(address[],uint128)': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'withdraw(address,uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'balanceLocked',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'computeNewMultiplier',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'currentEpochMultiplier',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'emergencyWithdraw',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'epoch1Start',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'epochDuration',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'epochIsInitialized',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrentEpoch',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getEpochPoolSize',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getEpochUserBalance',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initEpochForTokens',
    values: [string[], BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [string, BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: 'balanceLocked',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'computeNewMultiplier',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'currentEpochMultiplier',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'emergencyWithdraw',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epoch1Start',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochDuration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochIsInitialized',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrentEpoch',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEpochPoolSize',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEpochUserBalance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initEpochForTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Deposit(address,address,uint256)': EventFragment;
    'EmergencyWithdraw(address,address,uint256)': EventFragment;
    'InitEpochForTokens(address,uint128,address[])': EventFragment;
    'Withdraw(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InitEpochForTokens'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export class Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingInterface;

  functions: {
    balanceLocked(
      user: string,
      token: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    computeNewMultiplier(
      prevBalance: BigNumberish,
      prevMultiplier: BigNumberish,
      amount: BigNumberish,
      currentMultiplier: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    currentEpochMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    epoch1Start(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochIsInitialized(
      token: string,
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEpochPoolSize(
      tokenAddress: string,
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getEpochUserBalance(
      user: string,
      token: string,
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    initEpochForTokens(
      tokensLP: string[],
      epochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _epochClock: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  balanceLocked(
    user: string,
    token: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  computeNewMultiplier(
    prevBalance: BigNumberish,
    prevMultiplier: BigNumberish,
    amount: BigNumberish,
    currentMultiplier: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  currentEpochMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  epoch1Start(overrides?: CallOverrides): Promise<BigNumber>;

  epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  epochIsInitialized(
    token: string,
    epochId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getEpochPoolSize(
    tokenAddress: string,
    epochId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getEpochUserBalance(
    user: string,
    token: string,
    epochId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  initEpochForTokens(
    tokensLP: string[],
    epochId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _epochClock: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceLocked(
      user: string,
      token: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    computeNewMultiplier(
      prevBalance: BigNumberish,
      prevMultiplier: BigNumberish,
      amount: BigNumberish,
      currentMultiplier: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    currentEpochMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    emergencyWithdraw(
      tokenAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    epoch1Start(overrides?: CallOverrides): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    epochIsInitialized(
      token: string,
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochPoolSize(
      tokenAddress: string,
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getEpochUserBalance(
      user: string,
      token: string,
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initEpochForTokens(
      tokensLP: string[],
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    initialize(_epochClock: string, overrides?: CallOverrides): Promise<void>;

    withdraw(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    Deposit(
      user?: string | null,
      tokenAddress?: string | null,
      amount?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; tokenAddress: string; amount: BigNumber }
    >;

    EmergencyWithdraw(
      user?: string | null,
      tokenAddress?: string | null,
      amount?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; tokenAddress: string; amount: BigNumber }
    >;

    InitEpochForTokens(
      caller?: string | null,
      epochId?: BigNumberish | null,
      tokens?: null,
    ): TypedEventFilter<
      [string, BigNumber, string[]],
      { caller: string; epochId: BigNumber; tokens: string[] }
    >;

    Withdraw(
      user?: string | null,
      tokenAddress?: string | null,
      amount?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; tokenAddress: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    balanceLocked(
      user: string,
      token: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    computeNewMultiplier(
      prevBalance: BigNumberish,
      prevMultiplier: BigNumberish,
      amount: BigNumberish,
      currentMultiplier: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    currentEpochMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    emergencyWithdraw(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    epoch1Start(overrides?: CallOverrides): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    epochIsInitialized(
      token: string,
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochPoolSize(
      tokenAddress: string,
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getEpochUserBalance(
      user: string,
      token: string,
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initEpochForTokens(
      tokensLP: string[],
      epochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      _epochClock: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdraw(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceLocked(
      user: string,
      token: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    computeNewMultiplier(
      prevBalance: BigNumberish,
      prevMultiplier: BigNumberish,
      amount: BigNumberish,
      currentMultiplier: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    currentEpochMultiplier(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    deposit(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    epoch1Start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochIsInitialized(
      token: string,
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochPoolSize(
      tokenAddress: string,
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getEpochUserBalance(
      user: string,
      token: string,
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initEpochForTokens(
      tokensLP: string[],
      epochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _epochClock: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface FoldWrapperInterface extends ethers.utils.Interface {
  functions: {
    'balanceLocked(address)': FunctionFragment;
    'balancerLP()': FunctionFragment;
    'computeNewMultiplier(uint256,uint128,uint256,uint128)': FunctionFragment;
    'currentEpochMultiplier()': FunctionFragment;
    'deposit(address,uint256,uint256)': FunctionFragment;
    'emergencyWithdraw()': FunctionFragment;
    'epoch1Start()': FunctionFragment;
    'epochDuration()': FunctionFragment;
    'epochIsInitialized(uint128)': FunctionFragment;
    'getCurrentEpoch()': FunctionFragment;
    'getEpochPoolSize(uint128)': FunctionFragment;
    'getEpochUserBalance(address,uint128)': FunctionFragment;
    'initEpoch(uint128)': FunctionFragment;
    'initialize(address,address,address,address)': FunctionFragment;
    'lastWithdrawEpochId()': FunctionFragment;
    'liquidate(address,address,uint256)': FunctionFragment;
    'liquidationFee(address)': FunctionFragment;
    'maxLiquidationFee()': FunctionFragment;
    'poolRouter()': FunctionFragment;
    'DictatorDAO()': FunctionFragment;
    'setLiquidationFee(uint256)': FunctionFragment;
    'setMaxLiquidationFee(uint256)': FunctionFragment;
    'withdraw(address,uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'balanceLocked',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'balancerLP',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'computeNewMultiplier',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'currentEpochMultiplier',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'emergencyWithdraw',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'epoch1Start',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'epochDuration',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'epochIsInitialized',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrentEpoch',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getEpochPoolSize',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getEpochUserBalance',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initEpoch',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'lastWithdrawEpochId',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidate',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidationFee',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'maxLiquidationFee',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'poolRouter',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'DictatorDAO', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setLiquidationFee',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxLiquidationFee',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [string, BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: 'balanceLocked',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'balancerLP', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'computeNewMultiplier',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'currentEpochMultiplier',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'emergencyWithdraw',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epoch1Start',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochDuration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochIsInitialized',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrentEpoch',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEpochPoolSize',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEpochUserBalance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lastWithdrawEpochId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'liquidationFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'maxLiquidationFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'poolRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DictatorDAO', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setLiquidationFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setMaxLiquidationFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Deposit(address,uint256)': EventFragment;
    'EmergencyWithdraw(address,uint256)': EventFragment;
    'InitEpoch(address,uint128)': EventFragment;
    'Liquidate(address,address,uint256,uint256)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InitEpoch'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Liquidate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export class FoldWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FoldWrapperInterface;

  functions: {
    balanceLocked(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    balancerLP(overrides?: CallOverrides): Promise<[string]>;

    computeNewMultiplier(
      prevBalance: BigNumberish,
      prevMultiplier: BigNumberish,
      amount: BigNumberish,
      currentMultiplier: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    currentEpochMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      lpOwner: string,
      amount: BigNumberish,
      liquidationPremium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    epoch1Start(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochIsInitialized(
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEpochPoolSize(
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getEpochUserBalance(
      user: string,
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    initEpoch(
      epochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _epochClock: string,
      _bddao: string,
      _balancerLP: string,
      _poolRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    lastWithdrawEpochId(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidate(
      liquidator: string,
      lpOwner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    liquidationFee(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    maxLiquidationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolRouter(overrides?: CallOverrides): Promise<[string]>;

    DictatorDAO(overrides?: CallOverrides): Promise<[string]>;

    setLiquidationFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMaxLiquidationFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      lpOwner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  balanceLocked(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  balancerLP(overrides?: CallOverrides): Promise<string>;

  computeNewMultiplier(
    prevBalance: BigNumberish,
    prevMultiplier: BigNumberish,
    amount: BigNumberish,
    currentMultiplier: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  currentEpochMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    lpOwner: string,
    amount: BigNumberish,
    liquidationPremium: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  epoch1Start(overrides?: CallOverrides): Promise<BigNumber>;

  epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  epochIsInitialized(
    epochId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getEpochPoolSize(
    epochId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getEpochUserBalance(
    user: string,
    epochId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  initEpoch(
    epochId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _epochClock: string,
    _bddao: string,
    _balancerLP: string,
    _poolRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  lastWithdrawEpochId(overrides?: CallOverrides): Promise<BigNumber>;

  liquidate(
    liquidator: string,
    lpOwner: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  liquidationFee(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

  poolRouter(overrides?: CallOverrides): Promise<string>;

  DictatorDAO(overrides?: CallOverrides): Promise<string>;

  setLiquidationFee(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMaxLiquidationFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    lpOwner: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceLocked(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    balancerLP(overrides?: CallOverrides): Promise<string>;

    computeNewMultiplier(
      prevBalance: BigNumberish,
      prevMultiplier: BigNumberish,
      amount: BigNumberish,
      currentMultiplier: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    currentEpochMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      lpOwner: string,
      amount: BigNumberish,
      liquidationPremium: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    epoch1Start(overrides?: CallOverrides): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    epochIsInitialized(
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochPoolSize(
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getEpochUserBalance(
      user: string,
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initEpoch(epochId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    initialize(
      _epochClock: string,
      _bddao: string,
      _balancerLP: string,
      _poolRouter: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    lastWithdrawEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      liquidator: string,
      lpOwner: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    liquidationFee(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    poolRouter(overrides?: CallOverrides): Promise<string>;

    DictatorDAO(overrides?: CallOverrides): Promise<string>;

    setLiquidationFee(
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaxLiquidationFee(
      newFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdraw(
      lpOwner: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    Deposit(
      user?: string | null,
      amount?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    EmergencyWithdraw(
      user?: string | null,
      amount?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    InitEpoch(
      caller?: string | null,
      epochId?: BigNumberish | null,
    ): TypedEventFilter<
      [string, BigNumber],
      { caller: string; epochId: BigNumber }
    >;

    Liquidate(
      liquidator?: string | null,
      user?: string | null,
      feeAmount?: null,
      amount?: null,
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        liquidator: string;
        user: string;
        feeAmount: BigNumber;
        amount: BigNumber;
      }
    >;

    Withdraw(
      user?: string | null,
      amount?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    balanceLocked(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    balancerLP(overrides?: CallOverrides): Promise<BigNumber>;

    computeNewMultiplier(
      prevBalance: BigNumberish,
      prevMultiplier: BigNumberish,
      amount: BigNumberish,
      currentMultiplier: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    currentEpochMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      lpOwner: string,
      amount: BigNumberish,
      liquidationPremium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    epoch1Start(overrides?: CallOverrides): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    epochIsInitialized(
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochPoolSize(
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getEpochUserBalance(
      user: string,
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initEpoch(
      epochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      _epochClock: string,
      _bddao: string,
      _balancerLP: string,
      _poolRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    lastWithdrawEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      liquidator: string,
      lpOwner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    liquidationFee(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    poolRouter(overrides?: CallOverrides): Promise<BigNumber>;

    DictatorDAO(overrides?: CallOverrides): Promise<BigNumber>;

    setLiquidationFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMaxLiquidationFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdraw(
      lpOwner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceLocked(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balancerLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeNewMultiplier(
      prevBalance: BigNumberish,
      prevMultiplier: BigNumberish,
      amount: BigNumberish,
      currentMultiplier: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    currentEpochMultiplier(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    deposit(
      lpOwner: string,
      amount: BigNumberish,
      liquidationPremium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    epoch1Start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochIsInitialized(
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochPoolSize(
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getEpochUserBalance(
      user: string,
      epochId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initEpoch(
      epochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _epochClock: string,
      _bddao: string,
      _balancerLP: string,
      _poolRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    lastWithdrawEpochId(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidate(
      liquidator: string,
      lpOwner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    liquidationFee(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    maxLiquidationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DictatorDAO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setLiquidationFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMaxLiquidationFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      lpOwner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}

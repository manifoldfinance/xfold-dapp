/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface BddaoInterface extends ethers.utils.Interface {
  functions: {
    'abrogateProposal(uint256)': FunctionFragment;
    'abrogationProposal_cancelVote(uint256)': FunctionFragment;
    'abrogationProposal_castVote(uint256,bool)': FunctionFragment;
    'abrogationProposals(uint256)': FunctionFragment;
    'acceptanceThreshold()': FunctionFragment;
    'activate()': FunctionFragment;
    'activeDuration()': FunctionFragment;
    'cancelProposal(uint256)': FunctionFragment;
    'cancelVote(uint256)': FunctionFragment;
    'castVote(uint256,bool)': FunctionFragment;
    'execute(uint256)': FunctionFragment;
    'getAbrogationProposalReceipt(uint256,address)': FunctionFragment;
    'getActions(uint256)': FunctionFragment;
    'getProposalParameters(uint256)': FunctionFragment;
    'getProposalQuorum(uint256)': FunctionFragment;
    'getReceipt(uint256,address)': FunctionFragment;
    'gracePeriodDuration()': FunctionFragment;
    'gradualWeightUpdate()': FunctionFragment;
    'initialize(address,address,address)': FunctionFragment;
    'isActive()': FunctionFragment;
    'lastProposalId()': FunctionFragment;
    'latestProposalIds(address)': FunctionFragment;
    'minQuorum()': FunctionFragment;
    'proposals(uint256)': FunctionFragment;
    'propose(address[],uint256[],string[],bytes[],string,string)': FunctionFragment;
    'queue(uint256)': FunctionFragment;
    'queueDuration()': FunctionFragment;
    'queuedTransactions(bytes32)': FunctionFragment;
    'setAcceptanceThreshold(uint256)': FunctionFragment;
    'setActiveDuration(uint256)': FunctionFragment;
    'setGracePeriodDuration(uint256)': FunctionFragment;
    'setGradualWeightUpdate(uint256)': FunctionFragment;
    'setMinQuorum(uint256)': FunctionFragment;
    'setQueueDuration(uint256)': FunctionFragment;
    'setSmartPoolAddress(address)': FunctionFragment;
    'setSmartPoolInitial(address)': FunctionFragment;
    'setWarmUpDuration(uint256)': FunctionFragment;
    'smartPool()': FunctionFragment;
    'startAbrogationProposal(uint256,string)': FunctionFragment;
    'state(uint256)': FunctionFragment;
    'triggerApplyAddToken()': FunctionFragment;
    'triggerWeightUpdate()': FunctionFragment;
    'warmUpDuration()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'abrogateProposal',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'abrogationProposal_cancelVote',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'abrogationProposal_castVote',
    values: [BigNumberish, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'abrogationProposals',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'acceptanceThreshold',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'activate', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'activeDuration',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'cancelProposal',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'cancelVote',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'castVote',
    values: [BigNumberish, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'execute',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAbrogationProposalReceipt',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getActions',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getProposalParameters',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getProposalQuorum',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getReceipt',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'gracePeriodDuration',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'gradualWeightUpdate',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string],
  ): string;
  encodeFunctionData(functionFragment: 'isActive', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'lastProposalId',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'latestProposalIds',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'minQuorum', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'proposals',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'propose',
    values: [string[], BigNumberish[], string[], BytesLike[], string, string],
  ): string;
  encodeFunctionData(functionFragment: 'queue', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'queueDuration',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'queuedTransactions',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setAcceptanceThreshold',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setActiveDuration',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setGracePeriodDuration',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setGradualWeightUpdate',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMinQuorum',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setQueueDuration',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setSmartPoolAddress',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setSmartPoolInitial',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setWarmUpDuration',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'smartPool', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'startAbrogationProposal',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'state', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'triggerApplyAddToken',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'triggerWeightUpdate',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'warmUpDuration',
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: 'abrogateProposal',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'abrogationProposal_cancelVote',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'abrogationProposal_castVote',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'abrogationProposals',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'acceptanceThreshold',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'activate', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'activeDuration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cancelProposal',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'cancelVote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'castVote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'execute', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getAbrogationProposalReceipt',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getActions', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getProposalParameters',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getProposalQuorum',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getReceipt', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'gracePeriodDuration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'gradualWeightUpdate',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isActive', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lastProposalId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'latestProposalIds',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'minQuorum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'propose', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queue', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'queueDuration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'queuedTransactions',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAcceptanceThreshold',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setActiveDuration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setGracePeriodDuration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setGradualWeightUpdate',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setMinQuorum',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setQueueDuration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setSmartPoolAddress',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setSmartPoolInitial',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setWarmUpDuration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'smartPool', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'startAbrogationProposal',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'state', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'triggerApplyAddToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'triggerWeightUpdate',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'warmUpDuration',
    data: BytesLike,
  ): Result;

  events: {
    'AbrogationProposalExecuted(uint256,address)': EventFragment;
    'AbrogationProposalStarted(uint256,address)': EventFragment;
    'AbrogationProposalVote(uint256,address,bool,uint256)': EventFragment;
    'AbrogationProposalVoteCancelled(uint256,address)': EventFragment;
    'ProposalCanceled(uint256,address)': EventFragment;
    'ProposalCreated(uint256)': EventFragment;
    'ProposalExecuted(uint256,address)': EventFragment;
    'ProposalQueued(uint256,address,uint256)': EventFragment;
    'Vote(uint256,address,bool,uint256)': EventFragment;
    'VoteCanceled(uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AbrogationProposalExecuted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AbrogationProposalStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AbrogationProposalVote'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'AbrogationProposalVoteCancelled',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposalCanceled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposalCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposalExecuted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposalQueued'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Vote'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VoteCanceled'): EventFragment;
}

export class Bddao extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BddaoInterface;

  functions: {
    abrogateProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    abrogationProposal_cancelVote(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    abrogationProposal_castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    abrogationProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, string, BigNumber, BigNumber] & {
        creator: string;
        createTime: BigNumber;
        description: string;
        forVotes: BigNumber;
        againstVotes: BigNumber;
      }
    >;

    acceptanceThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    activate(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    activeDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    cancelVote(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getAbrogationProposalReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        [boolean, BigNumber, boolean] & {
          hasVoted: boolean;
          votes: BigNumber;
          support: boolean;
        },
      ]
    >;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[], string[], string[]] & {
        targets: string[];
        values: BigNumber[];
        signatures: string[];
        calldatas: string[];
      }
    >;

    getProposalParameters(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          warmUpDuration: BigNumber;
          activeDuration: BigNumber;
          queueDuration: BigNumber;
          gracePeriodDuration: BigNumber;
          acceptanceThreshold: BigNumber;
          minQuorum: BigNumber;
        },
      ]
    >;

    getProposalQuorum(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        [boolean, BigNumber, boolean] & {
          hasVoted: boolean;
          votes: BigNumber;
          support: boolean;
        },
      ]
    >;

    gracePeriodDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    gradualWeightUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _xfoldAddr: string,
      _basketBalancer: string,
      _smartPool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    lastProposalId(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    minQuorum(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          warmUpDuration: BigNumber;
          activeDuration: BigNumber;
          queueDuration: BigNumber;
          gracePeriodDuration: BigNumber;
          acceptanceThreshold: BigNumber;
          minQuorum: BigNumber;
        },
      ] & {
        id: BigNumber;
        proposer: string;
        description: string;
        title: string;
        createTime: BigNumber;
        eta: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        canceled: boolean;
        executed: boolean;
        parameters: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          warmUpDuration: BigNumber;
          activeDuration: BigNumber;
          queueDuration: BigNumber;
          gracePeriodDuration: BigNumber;
          acceptanceThreshold: BigNumber;
          minQuorum: BigNumber;
        };
      }
    >;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      title: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    queueDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    queuedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    setAcceptanceThreshold(
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setActiveDuration(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setGracePeriodDuration(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setGradualWeightUpdate(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMinQuorum(
      quorum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setQueueDuration(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setSmartPoolAddress(
      _smartPool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setSmartPoolInitial(
      _smartPool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWarmUpDuration(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    smartPool(overrides?: CallOverrides): Promise<[string]>;

    startAbrogationProposal(
      proposalId: BigNumberish,
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[number]>;

    triggerApplyAddToken(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    triggerWeightUpdate(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    warmUpDuration(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  abrogateProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  abrogationProposal_cancelVote(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  abrogationProposal_castVote(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  abrogationProposals(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, string, BigNumber, BigNumber] & {
      creator: string;
      createTime: BigNumber;
      description: string;
      forVotes: BigNumber;
      againstVotes: BigNumber;
    }
  >;

  acceptanceThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  activate(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  activeDuration(overrides?: CallOverrides): Promise<BigNumber>;

  cancelProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  cancelVote(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  castVote(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  execute(
    proposalId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getAbrogationProposalReceipt(
    proposalId: BigNumberish,
    voter: string,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, BigNumber, boolean] & {
      hasVoted: boolean;
      votes: BigNumber;
      support: boolean;
    }
  >;

  getActions(
    proposalId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string[], BigNumber[], string[], string[]] & {
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
    }
  >;

  getProposalParameters(
    proposalId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      warmUpDuration: BigNumber;
      activeDuration: BigNumber;
      queueDuration: BigNumber;
      gracePeriodDuration: BigNumber;
      acceptanceThreshold: BigNumber;
      minQuorum: BigNumber;
    }
  >;

  getProposalQuorum(
    proposalId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getReceipt(
    proposalId: BigNumberish,
    voter: string,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, BigNumber, boolean] & {
      hasVoted: boolean;
      votes: BigNumber;
      support: boolean;
    }
  >;

  gracePeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

  gradualWeightUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _xfoldAddr: string,
    _basketBalancer: string,
    _smartPool: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  lastProposalId(overrides?: CallOverrides): Promise<BigNumber>;

  latestProposalIds(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  minQuorum(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        warmUpDuration: BigNumber;
        activeDuration: BigNumber;
        queueDuration: BigNumber;
        gracePeriodDuration: BigNumber;
        acceptanceThreshold: BigNumber;
        minQuorum: BigNumber;
      },
    ] & {
      id: BigNumber;
      proposer: string;
      description: string;
      title: string;
      createTime: BigNumber;
      eta: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      parameters: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        warmUpDuration: BigNumber;
        activeDuration: BigNumber;
        queueDuration: BigNumber;
        gracePeriodDuration: BigNumber;
        acceptanceThreshold: BigNumber;
        minQuorum: BigNumber;
      };
    }
  >;

  propose(
    targets: string[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    description: string,
    title: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  queue(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  queueDuration(overrides?: CallOverrides): Promise<BigNumber>;

  queuedTransactions(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  setAcceptanceThreshold(
    threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setActiveDuration(
    period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setGracePeriodDuration(
    period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setGradualWeightUpdate(
    period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMinQuorum(
    quorum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setQueueDuration(
    period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setSmartPoolAddress(
    _smartPool: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setSmartPoolInitial(
    _smartPool: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWarmUpDuration(
    period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  smartPool(overrides?: CallOverrides): Promise<string>;

  startAbrogationProposal(
    proposalId: BigNumberish,
    description: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  triggerApplyAddToken(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  triggerWeightUpdate(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  warmUpDuration(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    abrogateProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    abrogationProposal_cancelVote(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    abrogationProposal_castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    abrogationProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, string, BigNumber, BigNumber] & {
        creator: string;
        createTime: BigNumber;
        description: string;
        forVotes: BigNumber;
        againstVotes: BigNumber;
      }
    >;

    acceptanceThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    activate(overrides?: CallOverrides): Promise<void>;

    activeDuration(overrides?: CallOverrides): Promise<BigNumber>;

    cancelProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    cancelVote(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    execute(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getAbrogationProposalReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber, boolean] & {
        hasVoted: boolean;
        votes: BigNumber;
        support: boolean;
      }
    >;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[], string[], string[]] & {
        targets: string[];
        values: BigNumber[];
        signatures: string[];
        calldatas: string[];
      }
    >;

    getProposalParameters(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        warmUpDuration: BigNumber;
        activeDuration: BigNumber;
        queueDuration: BigNumber;
        gracePeriodDuration: BigNumber;
        acceptanceThreshold: BigNumber;
        minQuorum: BigNumber;
      }
    >;

    getProposalQuorum(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber, boolean] & {
        hasVoted: boolean;
        votes: BigNumber;
        support: boolean;
      }
    >;

    gracePeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    gradualWeightUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _xfoldAddr: string,
      _basketBalancer: string,
      _smartPool: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    lastProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    minQuorum(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          warmUpDuration: BigNumber;
          activeDuration: BigNumber;
          queueDuration: BigNumber;
          gracePeriodDuration: BigNumber;
          acceptanceThreshold: BigNumber;
          minQuorum: BigNumber;
        },
      ] & {
        id: BigNumber;
        proposer: string;
        description: string;
        title: string;
        createTime: BigNumber;
        eta: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        canceled: boolean;
        executed: boolean;
        parameters: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          warmUpDuration: BigNumber;
          activeDuration: BigNumber;
          queueDuration: BigNumber;
          gracePeriodDuration: BigNumber;
          acceptanceThreshold: BigNumber;
          minQuorum: BigNumber;
        };
      }
    >;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      title: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    queue(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    queueDuration(overrides?: CallOverrides): Promise<BigNumber>;

    queuedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    setAcceptanceThreshold(
      threshold: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setActiveDuration(
      period: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setGracePeriodDuration(
      period: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setGradualWeightUpdate(
      period: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMinQuorum(
      quorum: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setQueueDuration(
      period: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setSmartPoolAddress(
      _smartPool: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setSmartPoolInitial(
      _smartPool: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setWarmUpDuration(
      period: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    smartPool(overrides?: CallOverrides): Promise<string>;

    startAbrogationProposal(
      proposalId: BigNumberish,
      description: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    triggerApplyAddToken(overrides?: CallOverrides): Promise<void>;

    triggerWeightUpdate(overrides?: CallOverrides): Promise<void>;

    warmUpDuration(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    AbrogationProposalExecuted(
      proposalId?: BigNumberish | null,
      caller?: null,
    ): TypedEventFilter<
      [BigNumber, string],
      { proposalId: BigNumber; caller: string }
    >;

    AbrogationProposalStarted(
      proposalId?: BigNumberish | null,
      caller?: null,
    ): TypedEventFilter<
      [BigNumber, string],
      { proposalId: BigNumber; caller: string }
    >;

    AbrogationProposalVote(
      proposalId?: BigNumberish | null,
      user?: string | null,
      support?: null,
      power?: null,
    ): TypedEventFilter<
      [BigNumber, string, boolean, BigNumber],
      {
        proposalId: BigNumber;
        user: string;
        support: boolean;
        power: BigNumber;
      }
    >;

    AbrogationProposalVoteCancelled(
      proposalId?: BigNumberish | null,
      user?: string | null,
    ): TypedEventFilter<
      [BigNumber, string],
      { proposalId: BigNumber; user: string }
    >;

    ProposalCanceled(
      proposalId?: BigNumberish | null,
      caller?: null,
    ): TypedEventFilter<
      [BigNumber, string],
      { proposalId: BigNumber; caller: string }
    >;

    ProposalCreated(
      proposalId?: BigNumberish | null,
    ): TypedEventFilter<[BigNumber], { proposalId: BigNumber }>;

    ProposalExecuted(
      proposalId?: BigNumberish | null,
      caller?: null,
    ): TypedEventFilter<
      [BigNumber, string],
      { proposalId: BigNumber; caller: string }
    >;

    ProposalQueued(
      proposalId?: BigNumberish | null,
      caller?: null,
      eta?: null,
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { proposalId: BigNumber; caller: string; eta: BigNumber }
    >;

    Vote(
      proposalId?: BigNumberish | null,
      user?: string | null,
      support?: null,
      power?: null,
    ): TypedEventFilter<
      [BigNumber, string, boolean, BigNumber],
      {
        proposalId: BigNumber;
        user: string;
        support: boolean;
        power: BigNumber;
      }
    >;

    VoteCanceled(
      proposalId?: BigNumberish | null,
      user?: string | null,
    ): TypedEventFilter<
      [BigNumber, string],
      { proposalId: BigNumber; user: string }
    >;
  };

  estimateGas: {
    abrogateProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    abrogationProposal_cancelVote(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    abrogationProposal_castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    abrogationProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    acceptanceThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    activate(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    activeDuration(overrides?: CallOverrides): Promise<BigNumber>;

    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    cancelVote(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getAbrogationProposalReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getProposalParameters(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getProposalQuorum(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    gracePeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    gradualWeightUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _xfoldAddr: string,
      _basketBalancer: string,
      _smartPool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    lastProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    minQuorum(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      title: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    queueDuration(overrides?: CallOverrides): Promise<BigNumber>;

    queuedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setAcceptanceThreshold(
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setActiveDuration(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setGracePeriodDuration(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setGradualWeightUpdate(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMinQuorum(
      quorum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setQueueDuration(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setSmartPoolAddress(
      _smartPool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setSmartPoolInitial(
      _smartPool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setWarmUpDuration(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    smartPool(overrides?: CallOverrides): Promise<BigNumber>;

    startAbrogationProposal(
      proposalId: BigNumberish,
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    triggerApplyAddToken(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    triggerWeightUpdate(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    warmUpDuration(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    abrogateProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    abrogationProposal_cancelVote(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    abrogationProposal_castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    abrogationProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    acceptanceThreshold(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    activate(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    activeDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    cancelVote(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getAbrogationProposalReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getProposalParameters(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getProposalQuorum(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    gracePeriodDuration(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    gradualWeightUpdate(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      _xfoldAddr: string,
      _basketBalancer: string,
      _smartPool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastProposalId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    minQuorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      title: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    queueDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queuedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    setAcceptanceThreshold(
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setActiveDuration(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setGracePeriodDuration(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setGradualWeightUpdate(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMinQuorum(
      quorum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setQueueDuration(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setSmartPoolAddress(
      _smartPool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setSmartPoolInitial(
      _smartPool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWarmUpDuration(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    smartPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startAbrogationProposal(
      proposalId: BigNumberish,
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    triggerApplyAddToken(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    triggerWeightUpdate(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    warmUpDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
